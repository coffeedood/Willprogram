import tkinter as tk
from tkinter import messagebox
import json
import os
# Sample data structure for profiles
profiles = []

# Load profiles from a file
def load_profiles():
    global profiles
    try:
        with open("profiles.json", "r") as file:
            profiles = json.load(file)
    except FileNotFoundError:
        profiles = []
    except json.JSONDecodeError:
        profiles = []

# Save profiles to a file
def save_profiles():
    with open("profiles.json", "w") as file:
        json.dump(profiles, file)

# Function to open the profile window
def open_profile_window(profile_name):
    profile_window = tk.Toplevel()
    profile_window.title(f"Profile: {profile_name}")

    # Make the window maximized (instead of full screen)
    profile_window.state('zoomed')

    tk.Label(profile_window, text=f"Manage {profile_name}'s Information", font=("Arial", 14)).grid(row=0, column=0, columnspan=2, pady=10)

    # Find the selected profile data
    profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)

    if profile_data:
        # Define functions to update the status labels dynamically
        def update_contact_status():
            contact_status = "Complete" if profile_data.get('contacts', []) else "Incomplete"
            contact_status_label.config(text=contact_status)

        def update_real_estate_status():
            real_estate_status = "Complete" if profile_data.get('real_estate', []) else "Incomplete"
            real_estate_status_label.config(text=real_estate_status)

        def update_vehicle_status():
            vehicle_status = "Complete" if profile_data.get('vehicles', []) else "Incomplete"
            vehicle_status_label.config(text=vehicle_status)

        # Manage Contacts
        contact_status = "Complete" if profile_data.get('contacts', []) else "Incomplete"
        tk.Button(profile_window, text="Manage Contacts", command=lambda: open_contacts_window(profile_name, update_contact_status)).grid(row=1, column=0, pady=5, padx=10)
        contact_status_label = tk.Label(profile_window, text=contact_status)
        contact_status_label.grid(row=1, column=1)

        # Manage Real Estate
        real_estate_status = "Complete" if profile_data.get('real_estate', []) else "Incomplete"
        tk.Button(profile_window, text="Manage Real Estate", command=lambda: open_real_estate_window(profile_name, update_real_estate_status)).grid(row=2, column=0, pady=5, padx=10)
        real_estate_status_label = tk.Label(profile_window, text=real_estate_status)
        real_estate_status_label.grid(row=2, column=1)

        # Manage Vehicles
        vehicle_status = "Complete" if profile_data.get('vehicles', []) else "Incomplete"
        tk.Button(profile_window, text="Manage Vehicles", command=lambda: open_vehicles_window(profile_name, update_vehicle_status)).grid(row=3, column=0, pady=5, padx=10)
        vehicle_status_label = tk.Label(profile_window, text=vehicle_status)
        vehicle_status_label.grid(row=3, column=1)

        # Manage Important Tasks
        tk.Button(profile_window, text="Manage Important Tasks", command=lambda: open_important_tasks_window(profile_name)).grid(row=4, column=0, pady=5, padx=10)
        
        # Next Steps Button
        tk.Button(profile_window, text="Next Steps", command=lambda: open_next_steps_window(profile_name)).grid(row=5, column=0, pady=5, padx=10)

    # Add an "Exit" button to close the profile window
    tk.Button(profile_window, text="Exit", command=profile_window.destroy).grid(row=6, column=0, pady=5, padx=10)

# Function to open important tasks window
# Function to open important tasks window
def save_selected_task(selected_task, profile_name):
    if selected_task:
        # Print the selected task
        print(f"THE USER SELECTED {selected_task}")

        # Save selected task to a JSON file
        data = {}
        if os.path.exists("tasks.json"):
            with open("tasks.json", "r") as f:
                data = json.load(f)

        # Update the profile's selected task
        data[profile_name] = selected_task

        # Write back to the JSON file
        with open("tasks.json", "w") as f:
            json.dump(data, f)

        messagebox.showinfo("Task Saved", f"{selected_task} has been saved for {profile_name}.")
    else:
        messagebox.showwarning("Selection Error", "Please select a task.")

# Open important tasks window
def open_important_tasks_window(profile_name):
    tasks_window = tk.Toplevel()
    tasks_window.title(f"Manage Important Tasks for {profile_name}")

    tk.Label(tasks_window, text="Select Important Tasks:", font=("Arial", 14)).pack(pady=10)

    # Sample tasks
    tasks = ["Task 1", "Task 2", "Task 3"]

    # Radio button variable
    selected_task = tk.StringVar()

    # Load previous selection if available
    data = {}
    if os.path.exists("tasks.json"):
        with open("tasks.json", "r") as f:
            data = json.load(f)

    # Set the selected task based on previous selection
    if profile_name in data:
        selected_task.set(data[profile_name])

    # Create radio buttons
    for task in tasks:
        rb = tk.Radiobutton(tasks_window, text=task, variable=selected_task, value=task)
        rb.pack(anchor=tk.W)

    tk.Button(tasks_window, text="Save", command=lambda: save_selected_task(selected_task.get(), profile_name)).pack(pady=5)

# Function to open next steps window
def open_next_steps_window(profile_name):
    next_steps_window = tk.Toplevel()
    next_steps_window.title(f"Next Steps for {profile_name}")

    tk.Label(next_steps_window, text="Next Steps:", font=("Arial", 14)).pack(pady=10)

    tk.Label(next_steps_window, text="1. Review your contacts.").pack(pady=5)
    tk.Label(next_steps_window, text="2. Check your real estate information.").pack(pady=5)
    tk.Label(next_steps_window, text="3. Update vehicle details if necessary.").pack(pady=5)

# Function to handle double-click on a profile in the listbox
def on_profile_double_click(event):
    selected_index = profiles_listbox.curselection()
    if selected_index:
        selected_profile_name = profiles_listbox.get(selected_index[0])
        open_profile_window(selected_profile_name)

# Open contacts window
def open_contacts_window(profile_name, update_status_callback):
    contacts_window = tk.Toplevel()
    contacts_window.title(f"Manage Contacts for {profile_name}")

    tk.Label(contacts_window, text="Phone Number:").pack(pady=5)
    phone_entry = tk.Entry(contacts_window)
    phone_entry.pack(pady=5)

    tk.Label(contacts_window, text="Email Address:").pack(pady=5)
    email_entry = tk.Entry(contacts_window)
    email_entry.pack(pady=5)

    contacts_listbox = tk.Listbox(contacts_window, height=10, width=50)
    contacts_listbox.pack(pady=10)

    def refresh_contacts():
        contacts_listbox.delete(0, tk.END)
        profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
        if profile_data:
            for contact in profile_data.get('contacts', []):
                contacts_listbox.insert(tk.END, f"{contact['name']} | {contact['phone']} | {contact['email']}")

    def save_contact():
        contact_name = phone_entry.get()
        phone_number = phone_entry.get()
        email_address = email_entry.get()
        if contact_name and phone_number and email_address:
            profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
            if profile_data:
                if 'contacts' not in profile_data:
                    profile_data['contacts'] = []
                profile_data['contacts'].append({"name": contact_name, "phone": phone_number, "email": email_address})
                phone_entry.delete(0, tk.END)
                email_entry.delete(0, tk.END)
                update_status_callback()  # Update the contact status label
                refresh_contacts()  # Refresh the contact list display
                save_profiles()  # Save profiles to file
        else:
            messagebox.showwarning("Input Error", "Please fill all fields.")

    tk.Button(contacts_window, text="Save Contact", command=save_contact).pack(pady=5)
    refresh_contacts()  # Initial population of the contact list

# Open real estate window
def open_real_estate_window(profile_name, update_status_callback):
    real_estate_window = tk.Toplevel()
    real_estate_window.title(f"Manage Real Estate for {profile_name}")

    tk.Label(real_estate_window, text="Property Address:").pack(pady=5)
    address_entry = tk.Entry(real_estate_window)
    address_entry.pack(pady=5)

    tk.Label(real_estate_window, text="Property Value:").pack(pady=5)
    value_entry = tk.Entry(real_estate_window)
    value_entry.pack(pady=5)

    properties_listbox = tk.Listbox(real_estate_window, height=10, width=50)
    properties_listbox.pack(pady=10)

    def refresh_properties():
        properties_listbox.delete(0, tk.END)
        profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
        if profile_data:
            for property_data in profile_data.get('real_estate', []):
                properties_listbox.insert(tk.END, f"{property_data['address']} | ${property_data['value']}")

    def save_property():
        property_address = address_entry.get()
        property_value = value_entry.get()
        if property_address and property_value:
            profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
            if profile_data:
                if 'real_estate' not in profile_data:
                    profile_data['real_estate'] = []
                profile_data['real_estate'].append({"address": property_address, "value": property_value})
                address_entry.delete(0, tk.END)
                value_entry.delete(0, tk.END)
                update_status_callback()  # Update the real estate status label
                refresh_properties()  # Refresh the property list display
                save_profiles()  # Save profiles to file
        else:
            messagebox.showwarning("Input Error", "Please fill all fields.")

    tk.Button(real_estate_window, text="Save Property", command=save_property).pack(pady=5)
    refresh_properties()  # Initial population of the property list

# Open vehicles window
def open_vehicles_window(profile_name, update_status_callback):
    vehicles_window = tk.Toplevel()
    vehicles_window.title(f"Manage Vehicles for {profile_name}")

    tk.Label(vehicles_window, text="Vehicle Make:").pack(pady=5)
    make_entry = tk.Entry(vehicles_window)
    make_entry.pack(pady=5)

    tk.Label(vehicles_window, text="Vehicle Model:").pack(pady=5)
    model_entry = tk.Entry(vehicles_window)
    model_entry.pack(pady=5)

    vehicles_listbox = tk.Listbox(vehicles_window, height=10, width=50)
    vehicles_listbox.pack(pady=10)

    def refresh_vehicles():
        vehicles_listbox.delete(0, tk.END)
        profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
        if profile_data:
            for vehicle in profile_data.get('vehicles', []):
                vehicles_listbox.insert(tk.END, f"{vehicle['make']} | {vehicle['model']}")

    def save_vehicle():
        vehicle_make = make_entry.get()
        vehicle_model = model_entry.get()
        if vehicle_make and vehicle_model:
            profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
            if profile_data:
                if 'vehicles' not in profile_data:
                    profile_data['vehicles'] = []
                profile_data['vehicles'].append({"make": vehicle_make, "model": vehicle_model})
                make_entry.delete(0, tk.END)
                model_entry.delete(0, tk.END)
                update_status_callback()  # Update the vehicle status label
                refresh_vehicles()  # Refresh the vehicle list display
                save_profiles()  # Save profiles to file
        else:
            messagebox.showwarning("Input Error", "Please fill all fields.")

    tk.Button(vehicles_window, text="Save Vehicle", command=save_vehicle).pack(pady=5)
    refresh_vehicles()  # Initial population of the vehicle list

# Main window setup
root = tk.Tk()
root.title("Profile Management")
load_profiles()

# Listbox to display profiles
profiles_listbox = tk.Listbox(root, height=10, width=50)
profiles_listbox.pack(pady=10)

# Add profiles to the listbox
for profile in profiles:
    profiles_listbox.insert(tk.END, profile['name'])

profiles_listbox.bind("<Double-Button-1>", on_profile_double_click)

# Add an "Exit" button
tk.Button(root, text="Exit", command=root.quit).pack(pady=10)

root.mainloop()
