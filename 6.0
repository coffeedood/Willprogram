import tkinter as tk
from tkinter import messagebox, filedialog
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import json
import os

# File paths
PROFILES_FILE = "profiles.json"

# Function to load profiles from JSON file
def load_profiles():
    if os.path.exists(PROFILES_FILE):
        with open(PROFILES_FILE, "r") as file:
            return json.load(file)
    return []

# Function to save profiles to JSON file
def save_to_json(profiles, filename):
    with open(filename, "w") as file:
        json.dump(profiles, file, indent=4)

# Initialize profiles
profiles = load_profiles()

# Function to create a new profile
def create_profile_window():
    create_window = tk.Toplevel()
    create_window.title("Create New Profile")

    tk.Label(create_window, text="Profile Name:").pack(pady=10)
    name_entry = tk.Entry(create_window)
    name_entry.pack()

    def save_profile():
        profile_name = name_entry.get()
        if not profile_name:
            messagebox.showwarning("Input Error", "Profile name cannot be empty.")
            return

        if any(p['name'] == profile_name for p in profiles):
            messagebox.showwarning("Profile Exists", f"Profile '{profile_name}' already exists.")
            return

        new_profile = {
            'name': profile_name,
            'vehicles': False,
            'housing': False,
            'housing2': False,
            'contacts': [],
        }
        profiles.append(new_profile)
        save_to_json(profiles, PROFILES_FILE)
        profiles_listbox.insert(tk.END, profile_name)
        create_window.destroy()

    tk.Button(create_window, text="Save Profile", command=save_profile).pack(pady=10)

# Function to delete a highlighted profile
def delete_profile():
    selected_index = profiles_listbox.curselection()
    if not selected_index:
        messagebox.showwarning("Selection Error", "No profile selected.")
        return

    selected_index = selected_index[0]
    selected_profile = profiles[selected_index]
    
    # Confirm profile deletion
    confirm = messagebox.askyesno("Delete Profile", f"Are you sure you want to delete '{selected_profile['name']}'?")
    if confirm:
        profiles.pop(selected_index)
        save_to_json(profiles, PROFILES_FILE)
        
        # Update the listbox
        profiles_listbox.delete(selected_index)
        update_selected_profile_labels()  # Clear the labels after deletion

# Function to open contacts window
def open_contacts_window(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    contacts_window = tk.Toplevel()
    contacts_window.title(f"Contacts for Profile: {profile_name}")

    contacts_list = tk.Listbox(contacts_window, width=50, height=20)
    contacts_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(contacts_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    contacts_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=contacts_list.yview)

    def print_contacts():
        contacts_list.delete(0, tk.END)
        for contact in profile.get('contacts', []):
            contact_info = f"Name: {contact['name']}, Phone: {contact.get('phone', 'N/A')}, Email: {contact.get('email', 'N/A')}"
            contacts_list.insert(tk.END, contact_info)

    def add_contact():
        add_contact_window = tk.Toplevel()
        add_contact_window.title("Add Contact")

        tk.Label(add_contact_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_contact_window)
        name_entry.pack()

        tk.Label(add_contact_window, text="Phone:").pack(pady=10)
        phone_entry = tk.Entry(add_contact_window)
        phone_entry.pack()

        tk.Label(add_contact_window, text="Email:").pack(pady=10)
        email_entry = tk.Entry(add_contact_window)
        email_entry.pack()

        def save_contact():
            # Get the currently selected index in the Listbox
            selected_index = profiles_listbox.curselection()
            if selected_index:
                selected_index = selected_index[0]  # Get the first selected item

            if 'contacts' not in profile:
                profile['contacts'] = []
            new_contact = {
                'name': name_entry.get(),
                'phone': phone_entry.get(),
                'email': email_entry.get()
            }
            profile['contacts'].append(new_contact)
            save_to_json(profiles, PROFILES_FILE)
            print_contacts()
            add_contact_window.destroy()

            # Restore the selection after saving
            if selected_index is not None:
                profiles_listbox.selection_set(selected_index)  # Re-select the profile
                profiles_listbox.activate(selected_index)  # Ensure the selection is active
                update_selected_profile_labels()  # Update the labels for the re-selected profile

        tk.Button(add_contact_window, text="Save Contact", command=save_contact).pack(pady=10)

    tk.Button(contacts_window, text="Add Contact", command=add_contact).pack(pady=10)
    print_contacts()

# Function to update the labels based on the selected profile
def update_selected_profile_labels():
    selected_index = profiles_listbox.curselection()
    if selected_index:
        selected_profile = profiles[selected_index[0]]

        vehicles_complete = selected_profile.get('vehicles', False)
        housing_complete = selected_profile.get('housing', False)
        housing2_complete = selected_profile.get('housing2', False)
        contacts_complete = len(selected_profile.get('contacts', [])) > 0
        

        vehicles_label.config(text="Complete" if vehicles_complete else "Incomplete", fg="green" if vehicles_complete else "red")
        housing_label.config(text="Complete" if housing_complete else "Incomplete", fg="green" if housing_complete else "red")
        housing_label2.config(text="Complete" if housing2_complete else "Incomplete", fg="green" if housing2_complete else "red")
        contacts_label.config(text="Complete" if contacts_complete else "Incomplete", fg="green" if contacts_complete else "red")

# Main window function
def open_main_window():
    global profiles_listbox, vehicles_label, housing_label, housing_label2, contacts_label

    root = tk.Tk()
    root.title("Profile Manager")

    # Create a canvas for scrolling
    canvas = tk.Canvas(root, borderwidth=0)
    canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    # Create a scrollbar for the canvas
    scrollbar = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    # Configure the canvas to work with the scrollbar
    canvas.configure(yscrollcommand=scrollbar.set)

    # Create a frame inside the canvas to hold the main content
    content_frame = tk.Frame(canvas)
    canvas.create_window((0, 0), window=content_frame, anchor="nw")

    # Function to update the canvas scroll region
    def update_scroll_region(event):
        canvas.configure(scrollregion=canvas.bbox("all"))

    content_frame.bind("<Configure>", update_scroll_region)

    # Create a frame for the profiles listbox and scrollbar
    profiles_frame = tk.Frame(content_frame)
    profiles_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    # Create a scrollbar for the profiles listbox
    profiles_scrollbar = tk.Scrollbar(profiles_frame, orient="vertical")
    profiles_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    # Create the Listbox for profiles
    profiles_listbox = tk.Listbox(profiles_frame, height=20, width=50, yscrollcommand=profiles_scrollbar.set)
    profiles_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    # Configure the scrollbar for the listbox
    profiles_scrollbar.config(command=profiles_listbox.yview)

    # Bind profile selection to update labels
    profiles_listbox.bind("<<ListboxSelect>>", lambda event: update_selected_profile_labels())

    # Add buttons and labels to the content frame
    tk.Button(content_frame, text="Create Profile", command=create_profile_window).pack(pady=5)
    tk.Button(content_frame, text="Delete Profile", command=delete_profile).pack(pady=5)  # Delete Profile Button

    # Section: Vehicles
    vehicles_frame = tk.Frame(content_frame)
    vehicles_frame.pack(pady=5)
    tk.Button(vehicles_frame, text="Manage Vehicles", command=lambda: open_vehicles_window(profiles_listbox.get(tk.ACTIVE))).pack(side=tk.LEFT)
    vehicles_label = tk.Label(vehicles_frame, text="Incomplete", fg="red")
    vehicles_label.pack(side=tk.LEFT, padx=10)

    # Section: Housing
    housing_frame = tk.Frame(content_frame)
    housing_frame.pack(pady=5)
    tk.Button(housing_frame, text="Manage Housing", command=lambda: open_housing_window(profiles_listbox.get(tk.ACTIVE))).pack(side=tk.LEFT)
    housing_label = tk.Label(housing_frame, text="Incomplete", fg="red")
    housing_label.pack(side=tk.LEFT, padx=10)

    housing_frame2 = tk.Frame(content_frame)
    housing_frame2.pack(pady=5)
    tk.Button(housing_frame2, text="Manage Housing2", command=lambda: open_housing_window(profiles_listbox.get(tk.ACTIVE))).pack(side=tk.LEFT)
    housing_label2 = tk.Label(housing_frame2, text="Incomplete", fg="red")
    housing_label2.pack(side=tk.LEFT, padx=10)

    # Section: Contacts
    contacts_frame = tk.Frame(content_frame)
    contacts_frame.pack(pady=5)
    tk.Button(contacts_frame, text="Manage Contacts", command=lambda: open_contacts_window(profiles_listbox.get(tk.ACTIVE))).pack(side=tk.LEFT)
    contacts_label = tk.Label(contacts_frame, text="Incomplete", fg="red")
    contacts_label.pack(side=tk.LEFT, padx=10)
    

    contacts_frame = tk.Frame(content_frame)
    contacts_frame.pack(pady=5)
    tk.Button(contacts_frame, text="Manage Contacts", command=lambda: open_contacts_window(profiles_listbox.get(tk.ACTIVE))).pack(side=tk.LEFT)
    contacts_label = tk.Label(contacts_frame, text="Incomplete", fg="red")
    contacts_label.pack(side=tk.LEFT, padx=10)

    # Populate profiles listbox
    for profile in profiles:
        profiles_listbox.insert(tk.END, profile['name'])

    root.mainloop()

open_main_window()
