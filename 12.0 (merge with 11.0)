import tkinter as tk
from tkinter import messagebox
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import json
import os

PROFILES_FILE = "profiles.json"
profiles = []

# Load images as text placeholders
CHECKMARK = "✔"
XMARK = "✘"

# Function to save data to JSON
def save_to_json(data, filename):
    try:
        with open(filename, 'w') as file:
            json.dump(data, file, indent=4)
    except IOError:
        messagebox.showerror("Error", "Could not save data to file.")

# Function to load data from JSON
def load_from_json(filename):
    if os.path.exists(filename):
        try:
            with open(filename, 'r') as file:
                data = json.load(file)
                if isinstance(data, list):
                    return [p for p in data if isinstance(p, dict)]
        except IOError:
            messagebox.showerror("Error", "Could not load data from file.")
    return []

# Load profiles from JSON on startup
profiles = load_from_json(PROFILES_FILE)

# Function to update status labels
def update_status_label(label, section_name, is_complete):
    status_text = f"{section_name}: {CHECKMARK if is_complete else XMARK} {'Complete' if is_complete else 'Incomplete'}"
    label.config(text=status_text, fg="green" if is_complete else "red")

# Function to update labels based on the profile
def update_labels(profile):
    print(f"Updating labels for profile: {profile.get('name')}")
    update_banking_info_label(profile)
    update_credit_debts_label(profile)
    update_vehicles_label(profile)
    update_contacts_label(profile)
    update_documents_label(profile)
    update_housing_label(profile)
    update_housing_label2(profile)

def update_banking_info_label(profile):
    is_complete = profile and 'banking_info' in profile and profile['banking_info']
    print(f"Banking Info is_complete: {is_complete}")
    update_status_label(banking_info_label, "Banking Info", bool(is_complete))

def update_credit_debts_label(profile):
    is_complete = profile and 'credit_debts' in profile and profile['credit_debts']
    print(f"Credit Debts is_complete: {is_complete}")
    update_status_label(credit_debts_label, "Credit Debts", bool(is_complete))

def update_vehicles_label(profile):
    is_complete = profile and 'vehicles' in profile and profile['vehicles']
    print(f"Vehicles is_complete: {is_complete}")
    update_status_label(vehicles_label, "Vehicles", bool(is_complete))

def update_contacts_label(profile):
    is_complete = profile and 'contacts' in profile and profile['contacts']
    print(f"Contacts is_complete: {is_complete}")
    update_status_label(contacts_label, "Contacts", bool(is_complete))

def update_documents_label(profile):
    is_complete = profile and 'documents' in profile and profile['documents']
    print(f"Documents is_complete: {is_complete}")
    update_status_label(documents_label, "Documents", bool(is_complete))

def update_housing_label(profile):
    is_complete = profile and 'housing' in profile and profile['housing']
    print(f"Housing is_complete: {is_complete}")
    update_status_label(housing_label, "Housing", bool(is_complete))

def update_housing_label2(profile):
    is_complete = profile and 'housing2' in profile and profile['housing2']
    print(f"Housing2 is_complete: {is_complete}")
    update_status_label(housing_label2, "Housing2", bool(is_complete))

# Function to open the window for managing documents
def open_documents_window(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    documents_window = tk.Toplevel()
    documents_window.title(f"Documents for Profile: {profile_name}")

    documents_list = tk.Listbox(documents_window, width=50, height=20)
    documents_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(documents_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    documents_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=documents_list.yview)

    def print_documents():
        documents_list.delete(0, tk.END)
        for document in profile.get('documents', []):
            document_info = f"Title: {document['title']}, Type: {document.get('type', 'N/A')}, Notes: {document.get('notes', 'N/A')}"
            documents_list.insert(tk.END, document_info)

    def add_document():
        add_document_window = tk.Toplevel()
        add_document_window.title("Add Document")

        tk.Label(add_document_window, text="Title:").pack(pady=10)
        title_entry = tk.Entry(add_document_window)
        title_entry.pack()

        tk.Label(add_document_window, text="Type:").pack(pady=10)
        type_entry = tk.Entry(add_document_window)
        type_entry.pack()

        tk.Label(add_document_window, text="Notes:").pack(pady=10)
        notes_entry = tk.Entry(add_document_window)
        notes_entry.pack()

        def save_document():
            if 'documents' not in profile:
                profile['documents'] = []
            new_document = {
                'title': title_entry.get(),
                'type': type_entry.get(),
                'notes': notes_entry.get()
            }
            profile['documents'].append(new_document)
            save_to_json(profiles, PROFILES_FILE)
            print_documents()
            update_documents_label(profile)
            add_document_window.destroy()

        tk.Button(add_document_window, text="Save Document", command=save_document).pack(pady=10)

    tk.Button(documents_window, text="Add Document", command=add_document).pack(pady=10)
    print_documents()

# Function to open the create profile window
def create_profile_window():
    create_window = tk.Toplevel()
    create_window.title("Create Profile")

    tk.Label(create_window, text="Enter Profile Name:").pack(pady=10)
    profile_name_entry = tk.Entry(create_window)
    profile_name_entry.pack()

    def save_profile():
        profile_name = profile_name_entry.get().strip()
        if not profile_name:
            messagebox.showwarning("Invalid Input", "Profile name cannot be empty.")
            return
        if any(p['name'] == profile_name for p in profiles):
            messagebox.showwarning("Duplicate Profile", f"A profile with the name '{profile_name}' already exists.")
            return
        new_profile = {'name': profile_name, 'banking_info': {}, 'credit_debts': [], 'vehicles': [], 'contacts': [], 'documents': [], 'housing': {}, 'housing2': {}}
        profiles.append(new_profile)
        profiles_listbox.insert(tk.END, profile_name)
        save_to_json(profiles, PROFILES_FILE)
        create_window.destroy()

    tk.Button(create_window, text="Save Profile", command=save_profile).pack(pady=10)

# Function to open the banking info window
def open_banking_info_window(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    banking_info = profile.get('banking_info', {})
    if banking_info is None:
        banking_info = {}
        profile['banking_info'] = banking_info

    banking_info_window = tk.Toplevel()
    banking_info_window.title(f"Banking Info for {profile_name}")

    tk.Label(banking_info_window, text="Bank Name:").pack(pady=10)
    bank_name_entry = tk.Entry(banking_info_window)
    bank_name_entry.pack()
    bank_name_entry.insert(0, banking_info.get('bank_name', ''))

    tk.Label(banking_info_window, text="Bank Location:").pack(pady=10)
    bank_location_entry = tk.Entry(banking_info_window)
    bank_location_entry.pack()
    bank_location_entry.insert(0, banking_info.get('bank_location', ''))

    tk.Label(banking_info_window, text="Accounts (separate by commas):").pack(pady=10)
    accounts_entry = tk.Entry(banking_info_window)
    accounts_entry.pack()
    accounts_entry.insert(0, ','.join(banking_info.get('accounts', [])))

    tk.Label(banking_info_window, text="Other Important Info:").pack(pady=10)
    other_info_entry = tk.Entry(banking_info_window)
    other_info_entry.pack()
    other_info_entry.insert(0, banking_info.get('other_info', ''))

    def save_banking_info():
        banking_info = {
            'bank_name': bank_name_entry.get(),
            'bank_location': bank_location_entry.get(),
            'accounts': accounts_entry.get().split(","),
            'other_info': other_info_entry.get()
        }
        profile['banking_info'] = banking_info
        save_to_json(profiles, PROFILES_FILE)
        update_banking_info_label(profile)
        banking_info_window.destroy()

    tk.Button(banking_info_window, text="Save Banking Info", command=save_banking_info).pack(pady=10)

# Function to open the contacts window
# Function to open the contacts window
def open_contacts_window(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    contacts_window = tk.Toplevel()
    contacts_window.title(f"Contacts for Profile: {profile_name}")

    contacts_list = tk.Listbox(contacts_window, width=50, height=20)
    contacts_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(contacts_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    contacts_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=contacts_list.yview)

    def print_contacts():
        contacts_list.delete(0, tk.END)
        for contact in profile.get('contacts', []):
            contact_info = f"Name: {contact['name']}, Phone: {contact.get('phone', 'N/A')}, Email: {contact.get('email', 'N/A')}"
            contacts_list.insert(tk.END, contact_info)

    def add_contact():
        add_contact_window = tk.Toplevel()
        add_contact_window.title("Add Contact")

        tk.Label(add_contact_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_contact_window)
        name_entry.pack()

        tk.Label(add_contact_window, text="Phone:").pack(pady=10)
        phone_entry = tk.Entry(add_contact_window)
        phone_entry.pack()

        tk.Label(add_contact_window, text="Email:").pack(pady=10)
        email_entry = tk.Entry(add_contact_window)
        email_entry.pack()

        def save_contact():
            if 'contacts' not in profile:
                profile['contacts'] = []
            new_contact = {
                'name': name_entry.get(),
                'phone': phone_entry.get(),
                'email': email_entry.get()
            }
            profile['contacts'].append(new_contact)
            save_to_json(profiles, PROFILES_FILE)
            print_contacts()
            update_contacts_label(profile)

            # Prompt to ask if the user wants to add another contact
            add_another = messagebox.askyesno("Add Another", "Would you like to add another contact?")
            
            if add_another:
                # Clear the text fields for new input
                name_entry.delete(0, tk.END)
                phone_entry.delete(0, tk.END)
                email_entry.delete(0, tk.END)
            else:
                # Close the window if they do not want to add another contact
                add_contact_window.destroy()

        tk.Button(add_contact_window, text="Save Contact", command=save_contact).pack(pady=10)

    tk.Button(contacts_window, text="Add Contact", command=add_contact).pack(pady=10)
    print_contacts()


# Function to open the housing window
def open_housing_window(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    housing = profile.get('housing', {})
    if housing is None:
        housing = {}
        profile['housing'] = housing

    housing_window = tk.Toplevel()
    housing_window.title(f"Housing for {profile_name}")

    tk.Label(housing_window, text="Address:").pack(pady=10)
    address_entry = tk.Entry(housing_window)
    address_entry.pack()
    address_entry.insert(0, housing.get('address', ''))

    tk.Label(housing_window, text="Mortgages (separate by commas):").pack(pady=10)
    mortgages_entry = tk.Entry(housing_window)
    mortgages_entry.pack()
    mortgages_entry.insert(0, ','.join(housing.get('mortgages', [])))

    tk.Label(housing_window, text="Other Property Details:").pack(pady=10)
    property_details_entry = tk.Entry(housing_window)
    property_details_entry.pack()
    property_details_entry.insert(0, housing.get('property_details', ''))

    def save_housing_info():
        housing_info = {
            'address': address_entry.get(),
            'mortgages': mortgages_entry.get().split(","),
            'property_details': property_details_entry.get()
        }
        profile['housing'] = housing_info
        save_to_json(profiles, PROFILES_FILE)
        update_housing_label(profile)
        housing_window.destroy()

    tk.Button(housing_window, text="Save Housing Info", command=save_housing_info).pack(pady=10)

# Function to open the housing window
def open_housing_window2(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    housing = profile.get('housing2', {})
    if housing is None:
        housing = {}
        profile['housing2'] = housing

    housing_window2 = tk.Toplevel()
    housing_window2.title(f"Housing2 for {profile_name}")

    tk.Label(housing_window2, text="Address2:").pack(pady=10)
    address2_entry = tk.Entry(housing_window2)
    address2_entry.pack()
    address2_entry.insert(0, housing.get('address2', ''))

    tk.Label(housing_window2, text="Mortgages2 (separate by commas):").pack(pady=10)
    mortgages2_entry = tk.Entry(housing_window2)
    mortgages2_entry.pack()
    mortgages2_entry.insert(0, ','.join(housing.get('mortgages2', [])))

    tk.Label(housing_window2, text="Other Property Details2:").pack(pady=10)
    property_details2_entry = tk.Entry(housing_window2)
    property_details2_entry.pack()
    property_details2_entry.insert(0, housing.get('property_details2', ''))

    def save_housing_info2():
        housing_info2 = {
            'address2': address2_entry.get(),
            'mortgages2': mortgages2_entry.get().split(","),
            'property_details2': property_details2_entry.get()
        }
        profile['housing2'] = housing_info2
        save_to_json(profiles, PROFILES_FILE)
        update_housing_label2(profile)
        housing_window2.destroy()

    tk.Button(housing_window2, text="Save Housing2 Info", command=save_housing_info2).pack(pady=10)

# Function to generate PDF for a profile
def generate_pdf(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    # Create a PDF file
    pdf_filename = f"{profile_name}_profile.pdf"
    c = canvas.Canvas(pdf_filename, pagesize=letter)
    width, height = letter

    # Title
    c.setFont("Helvetica-Bold", 16)
    c.drawString(100, height - 50, f"Profile: {profile_name}")

    # Banking Info
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, height - 100, "Banking Info:")
    c.setFont("Helvetica", 12)
    banking_info = profile.get('banking_info', {})
    c.drawString(100, height - 120, f"Bank Name: {banking_info.get('bank_name', 'N/A')}")
    c.drawString(100, height - 140, f"Bank Location: {banking_info.get('bank_location', 'N/A')}")
    c.drawString(100, height - 160, f"Accounts: {', '.join(banking_info.get('accounts', []))}")
    c.drawString(100, height - 180, f"Other Important Info: {banking_info.get('other_info', 'N/A')}")

    # Contacts
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, height - 220, "Contacts:")
    c.setFont("Helvetica", 12)
    y_position = height - 240
    for contact in profile.get('contacts', []):
        c.drawString(100, y_position, f"Name: {contact.get('name', 'N/A')}, Phone: {contact.get('phone', 'N/A')}, Email: {contact.get('email', 'N/A')}")
        y_position -= 20

    # Documents
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position, "Documents:")
    c.setFont("Helvetica", 12)
    y_position -= 20
    for document in profile.get('documents', []):
        c.drawString(100, y_position, f"Title: {document.get('title', 'N/A')}, Type: {document.get('type', 'N/A')}, Notes: {document.get('notes', 'N/A')}")
        y_position -= 20

    # Housing
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position, "Housing:")
    c.setFont("Helvetica", 12)
    y_position -= 20
    housing = profile.get('housing', {})
    c.drawString(100, y_position, f"Address: {housing.get('address', 'N/A')}")
    c.drawString(100, y_position - 20, f"Mortgages: {', '.join(housing.get('mortgages', []))}")
    c.drawString(100, y_position - 40, f"Other Property Details: {housing.get('property_details', 'N/A')}")

    # Housing2
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position - 60, "Housing2:")
    c.setFont("Helvetica", 12)
    y_position -= 80
    housing2 = profile.get('housing2', {})
    c.drawString(100, y_position, f"Address2: {housing2.get('address2', 'N/A')}")
    c.drawString(100, y_position - 20, f"Mortgages2: {', '.join(housing2.get('mortgages2', []))}")
    c.drawString(100, y_position - 40, f"Other Property Details2: {housing2.get('property_details2', 'N/A')}")

    # Save PDF
    c.save()
    messagebox.showinfo("Success", f"PDF '{pdf_filename}' generated successfully!")

# Create the main Tkinter window
root = tk.Tk()
root.title("Profile Management")

# Profile List
profiles_listbox = tk.Listbox(root, width=50, height=15)
profiles_listbox.pack(pady=10)

def select_profile(event):
    profile_name = profiles_listbox.get(profiles_listbox.curselection())
    update_labels(next(p for p in profiles if p['name'] == profile_name))

profiles_listbox.bind("<<ListboxSelect>>", select_profile)

# Labels for profile sections
banking_info_label = tk.Label(root, text="Banking Info: ", font=("Helvetica", 12))
banking_info_label.pack(pady=5)

credit_debts_label = tk.Label(root, text="Credit Debts: ", font=("Helvetica", 12))
credit_debts_label.pack(pady=5)

vehicles_label = tk.Label(root, text="Vehicles: ", font=("Helvetica", 12))
vehicles_label.pack(pady=5)

contacts_label = tk.Label(root, text="Contacts: ", font=("Helvetica", 12))
contacts_label.pack(pady=5)

documents_label = tk.Label(root, text="Documents: ", font=("Helvetica", 12))
documents_label.pack(pady=5)

housing_label = tk.Label(root, text="Housing: ", font=("Helvetica", 12))
housing_label.pack(pady=5)

housing_label2 = tk.Label(root, text="Housing2: ", font=("Helvetica", 12))
housing_label2.pack(pady=5)

# Buttons
tk.Button(root, text="Create Profile", command=create_profile_window).pack(pady=5)
tk.Button(root, text="Open Banking Info", command=lambda: open_banking_info_window(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)
tk.Button(root, text="Open Contacts", command=lambda: open_contacts_window(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)
tk.Button(root, text="Open Documents", command=lambda: open_documents_window(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)
tk.Button(root, text="Open Housing", command=lambda: open_housing_window(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)
tk.Button(root, text="Open Housing2", command=lambda: open_housing_window2(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)
tk.Button(root, text="Generate PDF", command=lambda: generate_pdf(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)

# Main loop
root.mainloop()
