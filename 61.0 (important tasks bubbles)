import tkinter as tk
from tkinter import messagebox
import json
import os

PROFILES_FILE = "profiles.json"

# Function to load profiles from JSON file
def load_profiles():
    if os.path.exists(PROFILES_FILE):
        with open(PROFILES_FILE, "r") as file:
            return json.load(file)
    return []

# Function to save profiles to JSON file
def save_profiles(profiles):
    with open(PROFILES_FILE, "w") as file:
        json.dump(profiles, file, indent=4)

# Load profiles initially
profiles = load_profiles()

# Function to save selected next steps to the profiles.json file
def save_selected_next_steps(selected_steps, profile_name):
    if selected_steps:
        # Load profiles data
        profiles_data = load_profiles()

        # Ensure profile exists
        profile = next((p for p in profiles_data if p['name'] == profile_name), None)
        if profile:
            # Save next steps under the profile
            profile["next_steps"] = selected_steps

            # Write back to the profiles file
            save_profiles(profiles_data)

            messagebox.showinfo("Steps Saved", f"Your selections have been saved for {profile_name}.")
        else:
            messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' does not exist.")
    else:
        messagebox.showwarning("Selection Error", "Please select at least one next step.")

# Open Next Steps window
def open_next_steps_window(profile_name):
    steps_window = tk.Toplevel()
    steps_window.title(f"Manage Next Steps for {profile_name}")

    tk.Label(steps_window, text="Next Steps (Yes or No):", font=("Arial", 14)).pack(pady=10)

    # List of next steps
    steps = [
        "Locate Will or Other Estate Planning Documents",
        "Will and Trust (See Section 17)",
        "Contact Organizations and Service Providers",
        "Insurance (See Section 18)",
        "Bank and Brokerage Accounts (See Section 19)",
        "Retirement Plans and Pensions (See Section 20)",
        "Government Benefits (See Section 21)",
        "Service Providers (See Section 10)",
        "Other: Add custom step 1",
        "Other: Add custom step 2",
        "Other: Add custom step 3",
        "Other: Add custom step 4"
    ]

    # Dictionary to store selected steps
    profiles_data = load_profiles()
    profile = next((p for p in profiles_data if p['name'] == profile_name), None)
    selected_steps = profile.get("next_steps", {}) if profile else {}

    # Create radio buttons for each step with "Yes" and "No" options
    step_vars = {}
    for step in steps:
        step_frame = tk.Frame(steps_window)
        step_frame.pack(anchor=tk.W, pady=5)

        # Step label
        tk.Label(step_frame, text=step, font=("Arial", 12)).pack(side=tk.LEFT)

        # Variables to store "Yes" or "No" selection
        step_vars[step] = tk.StringVar(value=selected_steps.get(step, ""))

        # Yes and No radio buttons
        yes_rb = tk.Radiobutton(step_frame, text="Yes", variable=step_vars[step], value="Yes")
        no_rb = tk.Radiobutton(step_frame, text="No", variable=step_vars[step], value="No")

        yes_rb.pack(side=tk.LEFT, padx=5)
        no_rb.pack(side=tk.LEFT, padx=5)

    # Save button
    def save_steps():
        # Collect selected steps
        final_selections = {step: var.get() for step, var in step_vars.items()}
        save_selected_next_steps(final_selections, profile_name)

    tk.Button(steps_window, text="Save", command=save_steps).pack(pady=10)


# Function to open the profile window
def open_profile_window(profile_name):
    profile_window = tk.Toplevel()
    profile_window.title(f"Profile: {profile_name}")

    # Make the window maximized (instead of full screen)
    profile_window.state('zoomed')

    tk.Label(profile_window, text=f"Manage {profile_name}'s Information", font=("Arial", 14)).grid(row=0, column=0, columnspan=2, pady=10)

    # Find the selected profile data
    profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)

    if profile_data:
        # Manage Next Steps
        tk.Button(profile_window, text="Manage Next Steps", command=lambda: open_next_steps_window(profile_name)).grid(row=1, column=0, pady=5, padx=10)

        # Add more buttons or sections as needed here...

    # Add an "Exit" button to close the profile window
    tk.Button(profile_window, text="Exit", command=profile_window.destroy).grid(row=7, column=0, pady=5, padx=10)


# Function to handle double-click on a profile in the listbox
def on_profile_double_click(event):
    selected_index = profiles_listbox.curselection()
    if selected_index:
        selected_profile_name = profiles_listbox.get(selected_index[0])
        open_profile_window(selected_profile_name)


# Main window setup
root = tk.Tk()
root.title("Profiles Management")

tk.Label(root, text="Profiles", font=("Arial", 16)).pack(pady=10)

profiles_listbox = tk.Listbox(root, height=10, width=40)
profiles_listbox.pack(pady=10)

# Populate the listbox with profiles
for profile in profiles:
    profiles_listbox.insert(tk.END, profile['name'])

# Bind double-click to open the profile window
profiles_listbox.bind("<Double-Button-1>", on_profile_double_click)

# Create new profile button

root.mainloop()
