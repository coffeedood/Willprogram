import tkinter as tk
from tkinter import messagebox
import json

# Sample data structure for profiles
profiles = []

# Load profiles from a file
def load_profiles():
    global profiles
    try:
        with open("profiles.json", "r") as file:
            profiles = json.load(file)
    except FileNotFoundError:
        profiles = []
    except json.JSONDecodeError:
        profiles = []

# Save profiles to a file
def save_profiles():
    with open("profiles.json", "w") as file:
        json.dump(profiles, file)

# Function to open the profile window
def open_profile_window(profile_name):
    profile_window = tk.Toplevel()
    profile_window.title(f"Profile: {profile_name}")

    # Make the window maximized (instead of full screen)
    profile_window.state('zoomed')

    tk.Label(profile_window, text=f"Manage {profile_name}'s Information", font=("Arial", 14)).grid(row=0, column=0, columnspan=2, pady=10)

    # Find the selected profile data
    profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)

    if profile_data:
        # Define functions to update the status labels dynamically
        def update_contact_status():
            contact_status = "Complete" if profile_data.get('contacts', []) else "Incomplete"
            contact_status_label.config(text=contact_status)

        def update_real_estate_status():
            real_estate_status = "Complete" if profile_data.get('real_estate', []) else "Incomplete"
            real_estate_status_label.config(text=real_estate_status)

        def update_vehicle_status():
            vehicle_status = "Complete" if profile_data.get('vehicles', []) else "Incomplete"
            vehicle_status_label.config(text=vehicle_status)

        # Manage Contacts
        contact_status = "Complete" if profile_data.get('contacts', []) else "Incomplete"
        tk.Button(profile_window, text="Manage Contacts", command=lambda: open_contacts_window(profile_name, update_contact_status)).grid(row=1, column=0, pady=5, padx=10)
        contact_status_label = tk.Label(profile_window, text=contact_status)
        contact_status_label.grid(row=1, column=1)

        # Manage Real Estate
        real_estate_status = "Complete" if profile_data.get('real_estate', []) else "Incomplete"
        tk.Button(profile_window, text="Manage Real Estate", command=lambda: open_real_estate_window(profile_name, update_real_estate_status)).grid(row=2, column=0, pady=5, padx=10)
        real_estate_status_label = tk.Label(profile_window, text=real_estate_status)
        real_estate_status_label.grid(row=2, column=1)

        # Manage Vehicles
        vehicle_status = "Complete" if profile_data.get('vehicles', []) else "Incomplete"
        tk.Button(profile_window, text="Manage Vehicles", command=lambda: open_vehicles_window(profile_name, update_vehicle_status)).grid(row=3, column=0, pady=5, padx=10)
        vehicle_status_label = tk.Label(profile_window, text=vehicle_status)
        vehicle_status_label.grid(row=3, column=1)

    # Add an "Exit" button to close the profile window
    tk.Button(profile_window, text="Exit", command=profile_window.destroy).grid(row=4, column=0, pady=5, padx=10)

# Function to handle double-click on a profile in the listbox
def on_profile_double_click(event):
    selected_index = profiles_listbox.curselection()
    if selected_index:
        selected_profile_name = profiles_listbox.get(selected_index[0])
        open_profile_window(selected_profile_name)

# Open contacts window
def open_contacts_window(profile_name, update_status_callback):
    contacts_window = tk.Toplevel()
    contacts_window.title(f"Manage Contacts for {profile_name}")

    # Sample input field for adding a contact
    contact_entry = tk.Entry(contacts_window)
    contact_entry.pack(pady=10)

    contacts_listbox = tk.Listbox(contacts_window, height=10, width=50)
    contacts_listbox.pack(pady=10)

    def refresh_contacts():
        contacts_listbox.delete(0, tk.END)
        profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
        if profile_data:
            for contact in profile_data.get('contacts', []):
                contacts_listbox.insert(tk.END, contact)

    def save_contact():
        contact_name = contact_entry.get()
        if contact_name:
            profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
            if profile_data:
                if 'contacts' not in profile_data:
                    profile_data['contacts'] = []
                profile_data['contacts'].append(contact_name)
                contact_entry.delete(0, tk.END)
                update_status_callback()  # Update the contact status label
                refresh_contacts()  # Refresh the contact list display
                save_profiles()  # Save profiles to file
        else:
            messagebox.showwarning("Input Error", "Please enter a contact name.")

    tk.Button(contacts_window, text="Save Contact", command=save_contact).pack(pady=5)
    refresh_contacts()  # Initial population of the contact list

# Open real estate window
def open_real_estate_window(profile_name, update_status_callback):
    real_estate_window = tk.Toplevel()
    real_estate_window.title(f"Manage Real Estate for {profile_name}")

    property_entry = tk.Entry(real_estate_window)
    property_entry.pack(pady=10)

    properties_listbox = tk.Listbox(real_estate_window, height=10, width=50)
    properties_listbox.pack(pady=10)

    def refresh_properties():
        properties_listbox.delete(0, tk.END)
        profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
        if profile_data:
            for property_name in profile_data.get('real_estate', []):
                properties_listbox.insert(tk.END, property_name)

    def save_property():
        property_name = property_entry.get()
        if property_name:
            profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
            if profile_data:
                if 'real_estate' not in profile_data:
                    profile_data['real_estate'] = []
                profile_data['real_estate'].append(property_name)
                property_entry.delete(0, tk.END)
                update_status_callback()  # Update the real estate status label
                refresh_properties()  # Refresh the property list display
                save_profiles()  # Save profiles to file
        else:
            messagebox.showwarning("Input Error", "Please enter a property name.")

    tk.Button(real_estate_window, text="Save Property", command=save_property).pack(pady=5)
    refresh_properties()  # Initial population of the property list

# Open vehicles window
def open_vehicles_window(profile_name, update_status_callback):
    vehicles_window = tk.Toplevel()
    vehicles_window.title(f"Manage Vehicles for {profile_name}")

    # Sample input field for adding a vehicle
    vehicle_entry = tk.Entry(vehicles_window)
    vehicle_entry.pack(pady=10)

    vehicles_listbox = tk.Listbox(vehicles_window, height=10, width=50)
    vehicles_listbox.pack(pady=10)

    def refresh_vehicles():
        vehicles_listbox.delete(0, tk.END)
        profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
        if profile_data:
            for vehicle in profile_data.get('vehicles', []):
                vehicles_listbox.insert(tk.END, vehicle)

    def save_vehicle():
        vehicle_name = vehicle_entry.get()
        if vehicle_name:
            profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
            if profile_data:
                if 'vehicles' not in profile_data:
                    profile_data['vehicles'] = []
                profile_data['vehicles'].append(vehicle_name)
                vehicle_entry.delete(0, tk.END)
                update_status_callback()  # Update the vehicle status label
                refresh_vehicles()  # Refresh the vehicle list display
                save_profiles()  # Save profiles to file
        else:
            messagebox.showwarning("Input Error", "Please enter a vehicle name.")

    tk.Button(vehicles_window, text="Save Vehicle", command=save_vehicle).pack(pady=5)
    refresh_vehicles()  # Initial population of the vehicle list

# Main window
root = tk.Tk()
root.title("Profile Manager")

# Load existing profiles
load_profiles()

# Listbox for profiles
profiles_listbox = tk.Listbox(root, height=10, width=50)
profiles_listbox.pack(pady=20)

# Populate the listbox with profile names
for profile in profiles:
    profiles_listbox.insert(tk.END, profile['name'])

# Bind double-click event to the listbox
profiles_listbox.bind("<Double-Button-1>", on_profile_double_click)

# Buttons for creating/deleting profiles
tk.Button(root, text="Create Profile", command=lambda: create_profile_window()).pack(pady=5)
tk.Button(root, text="Delete Profile", command=lambda: print("Delete Profile")).pack(pady=5)

root.mainloop()
