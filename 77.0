from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import tkinter as tk
from tkinter import messagebox
import json
import os
PROFILES_FILE = "profiles.json"

# Function to load profiles from JSON file
def load_profiles():
    if os.path.exists(PROFILES_FILE):
        with open(PROFILES_FILE, "r") as file:
            return json.load(file)
    return []

# Function to save profiles to JSON file
def save_profiles(profiles):
    with open(PROFILES_FILE, "w") as file:
        json.dump(profiles, file, indent=4)

# Load profiles initially
profiles = load_profiles()

# Function to save selected next steps to the profiles.json file
def save_selected_next_steps(selected_steps, profile_name):
    if selected_steps:
        profiles_data = load_profiles()
        profile = next((p for p in profiles_data if p['name'] == profile_name), None)
        if profile:
            profile["next_steps"] = selected_steps
            save_profiles(profiles_data)
            messagebox.showinfo("Steps Saved", f"Your selections have been saved for {profile_name}.")
        else:
            messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' does not exist.")
    else:
        messagebox.showwarning("Selection Error", "Please select at least one next step.")

# Function to open the Next Steps window
def save_selected_next_steps(selected_steps, profile_name):
    if selected_steps:
        # Load profiles data
        profiles_data = load_profiles()

        # Ensure profile exists
        profile = next((p for p in profiles_data if p['name'] == profile_name), None)
        if profile:
            # Save next steps under the profile
            profile["next_steps"] = selected_steps

            # Write back to the profiles file
            save_profiles(profiles_data)

            messagebox.showinfo("Steps Saved", f"Your selections have been saved for {profile_name}.")
        else:
            messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' does not exist.")
    else:
        messagebox.showwarning("Selection Error", "Please select at least one next step.")

# Open Next Steps window
def open_next_steps_window(profile_name):
    steps_window = tk.Toplevel()
    steps_window.title(f"Manage Next Steps for {profile_name}")

    tk.Label(steps_window, text="Next Steps (Yes or No):", font=("Arial", 14)).pack(pady=10)

    # List of next steps
    steps = [
        "Locate Will or Other Estate Planning Documents",
        "Will and Trust (See Section 17)",
        "Contact Organizations and Service Providers",
        "Insurance (See Section 18)",
        "Bank and Brokerage Accounts (See Section 19)",
        "Retirement Plans and Pensions (See Section 20)",
        "Government Benefits (See Section 21)",
        "Service Providers (See Section 10)",
        "Other: Add custom step 1",
        "Other: Add custom step 2",
        "Other: Add custom step 3",
        "Other: Add custom step 4"
    ]

    # Dictionary to store selected steps
    profiles_data = load_profiles()
    profile = next((p for p in profiles_data if p['name'] == profile_name), None)
    selected_steps = profile.get("next_steps", {}) if profile else {}

    # Create radio buttons for each step with "Yes" and "No" options
    step_vars = {}
    for step in steps:
        step_frame = tk.Frame(steps_window)
        step_frame.pack(anchor=tk.W, pady=5)

        # Step label
        tk.Label(step_frame, text=step, font=("Arial", 12)).pack(side=tk.LEFT)

        # Variables to store "Yes" or "No" selection
        step_vars[step] = tk.StringVar(value=selected_steps.get(step, ""))

        # Yes and No radio buttons
        yes_rb = tk.Radiobutton(step_frame, text="Yes", variable=step_vars[step], value="Yes")
        no_rb = tk.Radiobutton(step_frame, text="No", variable=step_vars[step], value="No")

        yes_rb.pack(side=tk.LEFT, padx=5)
        no_rb.pack(side=tk.LEFT, padx=5)

    # Save button
    def save_steps():
        # Collect selected steps
        final_selections = {step: var.get() for step, var in step_vars.items()}
        save_selected_next_steps(final_selections, profile_name)

    tk.Button(steps_window, text="Save", command=save_steps).pack(pady=10)

# Function to open the Vehicles window
def open_vehicles_window(profile_name, update_status_callback):
    vehicles_window = tk.Toplevel()
    vehicles_window.title(f"Manage vehicles for {profile_name}")

    tk.Label(vehicles_window, text="Vehicle Brand:").pack(pady=5)
    name_entry = tk.Entry(vehicles_window)
    name_entry.pack(pady=5)
    name_entry.focus_set()  # Set focus to the vehicle name entry field

    tk.Label(vehicles_window, text="Vehicle Model:").pack(pady=5)
    model_entry = tk.Entry(vehicles_window)
    model_entry.pack(pady=5)

    tk.Label(vehicles_window, text="Vehicle Color:").pack(pady=5)
    color_entry = tk.Entry(vehicles_window)
    color_entry.pack(pady=5)

    tk.Label(vehicles_window, text="Vehicle Address:").pack(pady=5)
    address_entry = tk.Entry(vehicles_window)
    address_entry.pack(pady=5)

    tk.Label(vehicles_window, text="Ownership Status:").pack(pady=5)
    relation_var = tk.StringVar(value="Friend")  # Default relation

    # Relation radio buttons
    relation_frame = tk.Frame(vehicles_window)
    relation_frame.pack(pady=5)
    tk.Radiobutton(relation_frame, text="Owner", variable=relation_var, value="Owner").pack(side=tk.LEFT, padx=5)
    tk.Radiobutton(relation_frame, text="This is a Rental Car", variable=relation_var, value="This is a Rental Car").pack(side=tk.LEFT, padx=5)
    tk.Radiobutton(relation_frame, text="Other", variable=relation_var, value="Other").pack(side=tk.LEFT, padx=5)

    # vehicles list display
    vehicles_listbox = tk.Listbox(vehicles_window, height=10, width=50)
    vehicles_listbox.pack(pady=10)

    def refresh_vehicles():
        vehicles_listbox.delete(0, tk.END)
        profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
        if profile_data:
            for vehicle in profile_data.get('vehicles', []):
                vehicle_details = f"{vehicle['name']} | {vehicle['model']} | {vehicle['color']} | {vehicle['address']}| {vehicle['relation']}"
                vehicles_listbox.insert(tk.END, vehicle_details)

    def save_vehicle():
        vehicle_name = name_entry.get()
        model_number = model_entry.get()
        color_address = color_entry.get()
        address = address_entry.get()
        relation = relation_var.get()

        if vehicle_name and model_number and color_address and address and relation:
            profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
            if profile_data:
                if 'vehicles' not in profile_data:
                    profile_data['vehicles'] = []
                profile_data['vehicles'].append({
                    "name": vehicle_name,
                    "model": model_number,
                    "color": color_address,
                    "address": address,
                    "relation": relation
                })
                # Clear the entry fields after saving
                name_entry.delete(0, tk.END)
                model_entry.delete(0, tk.END)
                color_entry.delete(0, tk.END)
                address_entry.delete(0, tk.END)
                
                update_status_callback()  # Update the vehicle status label
                refresh_vehicles()  # Refresh the vehicle list display
                save_profiles(profiles)  # Save profiles to file
        else:
            messagebox.showwarning("Input Error", "Please fill all fields.")

    tk.Button(vehicles_window, text="Save vehicle", command=save_vehicle).pack(pady=5)
    refresh_vehicles()  # Initial population of the vehicle list

# Function to open the Contacts window
def open_contacts_window(profile_name, update_status_callback):
    contacts_window = tk.Toplevel()
    contacts_window.title(f"Manage Contacts for {profile_name}")

    tk.Label(contacts_window, text="Contact Name:").pack(pady=5)
    name_entry = tk.Entry(contacts_window)
    name_entry.pack(pady=5)
    name_entry.focus_set()  # Set focus to the Contact Name entry field

    tk.Label(contacts_window, text="Phone Number:").pack(pady=5)
    phone_entry = tk.Entry(contacts_window)
    phone_entry.pack(pady=5)

    tk.Label(contacts_window, text="Email Address:").pack(pady=5)
    email_entry = tk.Entry(contacts_window)
    email_entry.pack(pady=5)

    tk.Label(contacts_window, text="Address:").pack(pady=5)
    address_entry = tk.Entry(contacts_window)
    address_entry.pack(pady=5)

    tk.Label(contacts_window, text="Relation:").pack(pady=5)
    relation_var = tk.StringVar(value="Friend")  # Default relation

    # Relation radio buttons
    relation_frame = tk.Frame(contacts_window)
    relation_frame.pack(pady=5)
    tk.Radiobutton(relation_frame, text="Friend", variable=relation_var, value="Friend").pack(side=tk.LEFT, padx=5)
    tk.Radiobutton(relation_frame, text="Acquaintance", variable=relation_var, value="Acquaintance").pack(side=tk.LEFT, padx=5)
    tk.Radiobutton(relation_frame, text="Other", variable=relation_var, value="Other").pack(side=tk.LEFT, padx=5)

    # Contacts list display
    contacts_listbox = tk.Listbox(contacts_window, height=10, width=50)
    contacts_listbox.pack(pady=10)

    def refresh_contacts():
        contacts_listbox.delete(0, tk.END)
        profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
        if profile_data:
            for contact in profile_data.get('contacts', []):
                contact_details = f"{contact['name']} | {contact['phone']} | {contact['email']} | {contact['address']} | {contact['relation']}"
                contacts_listbox.insert(tk.END, contact_details)

    def save_contact():
        contact_name = name_entry.get()
        phone_number = phone_entry.get()
        email_address = email_entry.get()
        address = address_entry.get()
        relation = relation_var.get()

        if contact_name and phone_number and email_address and address and relation:
            profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
            if profile_data:
                if 'contacts' not in profile_data:
                    profile_data['contacts'] = []
                profile_data['contacts'].append({
                    "name": contact_name,
                    "phone": phone_number,
                    "email": email_address,
                    "address": address,
                    "relation": relation
                })
                # Clear the entry fields after saving
                name_entry.delete(0, tk.END)
                phone_entry.delete(0, tk.END)
                email_entry.delete(0, tk.END)
                address_entry.delete(0, tk.END)
                
                update_status_callback()  # Update the contact status label
                refresh_contacts()  # Refresh the contact list display
                save_profiles(profiles)  # Save profiles to file
        else:
            messagebox.showwarning("Input Error", "Please fill all fields.")

    tk.Button(contacts_window, text="Save Contact", command=save_contact).pack(pady=5)
    refresh_contacts()  # Initial population of the contact list


def open_biographies_window(profile_name, update_status_callback):
    biographies_window = tk.Toplevel()
    biographies_window.title(f"Manage biographies for {profile_name}")

    tk.Label(biographies_window, text="biography Name:").pack(pady=5)
    name_entry = tk.Entry(biographies_window)
    name_entry.pack(pady=5)
    name_entry.focus_set()  # Set focus to the biography Name entry field

    tk.Label(biographies_window, text="Phone Number:").pack(pady=5)
    phone_entry = tk.Entry(biographies_window)
    phone_entry.pack(pady=5)

    tk.Label(biographies_window, text="Email Address:").pack(pady=5)
    email_entry = tk.Entry(biographies_window)
    email_entry.pack(pady=5)

    tk.Label(biographies_window, text="Address:").pack(pady=5)
    address_entry = tk.Entry(biographies_window)
    address_entry.pack(pady=5)

    tk.Label(biographies_window, text="Relation:").pack(pady=5)
    relation_var = tk.StringVar(value="Friend")  # Default relation

    # Relation radio buttons
    relation_frame = tk.Frame(biographies_window)
    relation_frame.pack(pady=5)
    tk.Radiobutton(relation_frame, text="Friend", variable=relation_var, value="Friend").pack(side=tk.LEFT, padx=5)
    tk.Radiobutton(relation_frame, text="Acquaintance", variable=relation_var, value="Acquaintance").pack(side=tk.LEFT, padx=5)
    tk.Radiobutton(relation_frame, text="Other", variable=relation_var, value="Other").pack(side=tk.LEFT, padx=5)

    # biographies list display
    biographies_listbox = tk.Listbox(biographies_window, height=10, width=50)
    biographies_listbox.pack(pady=10)

    def refresh_biographies():
        biographies_listbox.delete(0, tk.END)
        profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
        if profile_data:
            for biography in profile_data.get('biographies', []):
                biography_details = f"{biography['name']} | {biography['phone']} | {biography['email']} | {biography['address']} | {biography['relation']}"
                biographies_listbox.insert(tk.END, biography_details)

    def save_biography():
        biography_name = name_entry.get()
        phone_number = phone_entry.get()
        email_address = email_entry.get()
        address = address_entry.get()
        relation = relation_var.get()

        if biography_name and phone_number and email_address and address and relation:
            profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)
            if profile_data:
                if 'biographies' not in profile_data:
                    profile_data['biographies'] = []
                profile_data['biographies'].append({
                    "name": biography_name,
                    "phone": phone_number,
                    "email": email_address,
                    "address": address,
                    "relation": relation
                })
                # Clear the entry fields after saving
                name_entry.delete(0, tk.END)
                phone_entry.delete(0, tk.END)
                email_entry.delete(0, tk.END)
                address_entry.delete(0, tk.END)
                
                update_status_callback()  # Update the biography status label
                refresh_biographies()  # Refresh the biography list display
                save_profiles(profiles)  # Save profiles to file
        else:
            messagebox.showwarning("Input Error", "Please fill all fields.")

    tk.Button(biographies_window, text="Save biography", command=save_biography).pack(pady=5)
    refresh_biographies()  # Initial population of the biography list
# Function to generate a PDF for a given profile
import os
from tkinter import filedialog

from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle

from tkinter import filedialog
import os
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle

def generate_profile_pdf(profile_data, default_filename):
    # Check if profile_data is a dictionary or if we need to find it in a list
    if isinstance(profile_data, str):
        # profile_data is actually a profile_name; find the corresponding profile data in the profiles list
        profile_name = profile_data
        profile_data = next((profile for profile in profiles if profile.get('name') == profile_name), None)
        if not profile_data:
            print(f"Profile '{profile_name}' not found.")
            return

    # Ask the user to select a folder to save the PDF
    folder_selected = filedialog.askdirectory(title="Select Folder to Save PDF")
    if not folder_selected:
        print("No folder selected. PDF generation cancelled.")
        return

    # Construct the full path for the PDF file
    filename = os.path.join(folder_selected, default_filename)
    
    # Create a PDF document
    doc = SimpleDocTemplate(filename, pagesize=letter)
    elements = []
    styles = getSampleStyleSheet()
    
    # Add the profile name as a title
    profile_name = profile_data.get('name', 'Unknown Profile')
    elements.append(Paragraph(f"Profile: {profile_name}", styles['Title']))
    elements.append(Spacer(1, 12))
    
    # Add biography details
    biography = profile_data.get('biography', {})
    elements.append(Paragraph("Biography:", styles['Heading2']))
    for key, value in biography.items():
        elements.append(Paragraph(f"{key}: {value}", styles['Normal']))
    elements.append(Spacer(1, 12))
    
    # Add contacts
    contacts = profile_data.get('contacts', [])
    elements.append(Paragraph("Contacts:", styles['Heading2']))
    for contact in contacts:
        elements.append(Paragraph(f"Name: {contact.get('name', '')}, Phone: {contact.get('phone', '')}", styles['Normal']))
    elements.append(Spacer(1, 12))
    
    # Add banking info
    banking_info = profile_data.get('banking_info', {})
    elements.append(Paragraph("Banking Information:", styles['Heading2']))
    for key, value in banking_info.items():
        elements.append(Paragraph(f"{key}: {value}", styles['Normal']))
    elements.append(Spacer(1, 12))
    
    # Add housing information
    housing = profile_data.get('housing', {})
    elements.append(Paragraph("Housing Information:", styles['Heading2']))
    for key, value in housing.items():
        elements.append(Paragraph(f"{key}: {value}", styles['Normal']))
    elements.append(Spacer(1, 12))
    
    # Add other sections like vehicles, business interests, etc., in a similar way
    vehicles = profile_data.get('vehicles', [])
    elements.append(Paragraph("Vehicles:", styles['Heading2']))
    for vehicle in vehicles:
        elements.append(Paragraph(f"Make: {vehicle.get('make', '')}, Model: {vehicle.get('model', '')}, Year: {vehicle.get('year', '')}", styles['Normal']))
    elements.append(Spacer(1, 12))

    # Build the PDF
    doc.build(elements)
    print(f"PDF for '{profile_name}' created successfully at {filename}.")


def open_profile_window(profile_name):
    profile_window = tk.Toplevel()
    profile_window.title(f"Profile: {profile_name}")
    profile_window.state('zoomed')

    tk.Label(profile_window, text=f"Manage {profile_name}'s Information", font=("Arial", 20)).grid(row=0, column=0, columnspan=2, pady=10)
    profile_data = next((profile for profile in profiles if profile['name'] == profile_name), None)

    if profile_data:
        # Manage Next Steps button
        tk.Button(profile_window, text="Manage Next Steps", command=lambda: open_next_steps_window(profile_name)).grid(row=1, column=0, pady=5, padx=10)

        # Function to update the status labels
        def update_status_callback():
            contact_status = "Complete" if profile_data.get('contacts', []) else "Incomplete"
            contact_status_label.config(text=contact_status)
            vehicle_status = "Complete" if profile_data.get('vehicles', []) else "Incomplete"
            vehicle_status_label.config(text=vehicle_status)

        # Contacts section
        contact_status = "Complete" if profile_data.get('contacts', []) else "Incomplete"
        tk.Button(profile_window, text="Manage Contacts", command=lambda: open_contacts_window(profile_name, update_status_callback)).grid(row=2, column=0, pady=5, padx=10)
        contact_status_label = tk.Label(profile_window, text=contact_status)
        contact_status_label.grid(row=2, column=1)

        # Vehicles section
        vehicle_status = "Complete" if profile_data.get('vehicles', []) else "Incomplete"
        tk.Button(profile_window, text="Manage Vehicles", command=lambda: open_vehicles_window(profile_name, update_status_callback)).grid(row=3, column=0, pady=5, padx=10)
        vehicle_status_label = tk.Label(profile_window, text=vehicle_status)
        vehicle_status_label.grid(row=3, column=1)
        tk.Button(profile_window, text="Create Biography", command=lambda: open_biographies_window(profile_name, update_status_callback)).grid(row=4, column=0, pady=5, padx=10)
        tk.Button(profile_window, text="Generate PDF", command=lambda: generate_profile_pdf(profile_name, f"{profile_name}_profile.pdf")).grid(row=5, column=0, pady=5, padx=10)

    tk.Button(profile_window, text="Exit", command=profile_window.destroy).grid(row=7, column=0, pady=5, padx=10)

# Function to handle double-click on a profile in the listbox
def on_profile_double_click(event):
    selected_index = profiles_listbox.curselection()
    if selected_index:
        selected_profile_name = profiles_listbox.get(selected_index[0])
        open_profile_window(selected_profile_name)

# Main window setup
root = tk.Tk()
root.title("Profiles Management")

tk.Label(root, text="Profiles", font=("Arial", 30)).pack(pady=10)

profiles_listbox = tk.Listbox(root, height=10, width=50)
profiles_listbox.pack(pady=10)
for profile in profiles:
    profiles_listbox.insert(tk.END, profile['name'])

profiles_listbox.bind("<Double-Button-1>", on_profile_double_click)

# Add new profile button
def add_new_profile():
    new_profile_name = new_profile_entry.get().strip()
    if new_profile_name:
        if any(p['name'] == new_profile_name for p in profiles):
            messagebox.showwarning("Duplicate Profile", "A profile with this name already exists.")
        else:
            profiles.append({'name': new_profile_name})
            save_profiles(profiles)
            profiles_listbox.insert(tk.END, new_profile_name)
            new_profile_entry.delete(0, tk.END)
            messagebox.showinfo("Profile Added", f"Profile '{new_profile_name}' has been added.")
    else:
        messagebox.showwarning("Input Error", "Please enter a profile name.")

# Entry and button to add new profiles
new_profile_entry = tk.Entry(root)
new_profile_entry.pack(pady=5)
tk.Button(root, text="Add New Profile", command=add_new_profile).pack(pady=5)

# Start the main loop
root.mainloop()
